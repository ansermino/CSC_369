#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include "ext2.h"
#include <string.h>
#define EEXIST 17 /* File exists */
#define ENOENT 2  /* No such file or directory */
#define EISDIR 21 /* Is a Directory*/

unsigned char *disk;
struct ext2_super_block *super_block;
struct ext2_group_desc *group_desc;
unsigned char *block_bitmap;
unsigned char *inode_bitmap;
struct ext2_inode *inodes;
unsigned int inode_index_given_name_parent(struct ext2_inode *parent_inode, char* name, unsigned char type);
struct ext2_inode* inode_given_path(char *input);

struct ext2_inode* inode_given_path(char *input){
	char real_path[1024];
	int path_len = strlen(input);
	strcpy(real_path, input);
	real_path[path_len + 1] = '\0';

	unsigned int num;

	// make the parent inode point to the root
	struct ext2_inode *parent_inode = &inodes[EXT2_ROOT_INO - 1];
	if (path_len != 1){
		char* temp = strtok(real_path, "/");
		while (temp != NULL){
			num = inode_index_given_name_parent(parent_inode, temp, EXT2_FT_DIR);
			printf("inode num : %d\n", num);
			if (num == 0){
				return NULL;
			}
			parent_inode = &inodes[num-1];
			temp = strtok(NULL, "/");
		}
	}
	else if (path_len == 1){
		if (real_path[0] == '/'){
			return parent_inode;
		}
	}
	return parent_inode;
}


int create_hard_link(char ** argvs){
  // source file path
  char *src_file = malloc(256);
  strncpy(src_file, argvs[2], strlen(argvs[2]));
  // dest file path
  char *dest_file = malloc(256);
  strncpy(dest_file, argvs[3]. strlen(argvs[3]));
  //get 一下名字，src和dest必须是file才行

  //src is a directory
  if (){
    return EISDIR;
  }
  //source file does not exist
  if (){
    return ENOENT;
  }
  // If "dest" exists (doesn't matter what it is,
  //as long as the name is taken, so to speak), then you must handle it with an EEXIST.
  if (){
    return EEXIST;
  }


  //parent inode count加一
  struct ext2_inode* parent_inode = inode_given_path(parent_path);
  parent_inode->i_links_count++;
  //增加directory descriptor
  struct ext2_dir_entry* new_entry = malloc(sizeof(struct ext2_dir_entry));
  new_entry -> inode = inode_index;
  new_entry -> file_type = EXT2_S_IFREG ;
  new_entry -> name_len = strlen(new_name);
  new_entry -> rec_len = get_entry_size(new_name);
  strcpy(new_entry->name, new_name);
  add_dir_entry(EXT2_FT_DIR, parent_inode, new_entry, new_name);

}

int create_soft_link(char ** argvs){
  // source file path
  char *src_file = malloc(256);
  strncpy(src_file, argvs[2], strlen(argvs[2]));
  // dest file path
  char *dest_file = malloc(256);
  strncpy(dest_file, argvs[3]. strlen(argvs[3]));
  //get 一下名字，src和dest必须是file才行

  //只需要check src是不是exsit就行了，可以是file也可以 directory
  if(){
    return ENOENT;
  }
  //check dest file 是不是 invalid
  if(){
    return ;
  }
  //check dest file 是不是exsit
  if (){
    return EEXIST;
  }
  //增加一个新的inode

  //增加一个新的dir descriptor

}

int main(int argc, char **argv){
	// check argvs

  if ((argc == 5) && (strncmp(argv[2], "-s", 2) != 0)):{
    fprintf(stderr, "Usage: ext2_ln <disk>  -s[optional] <absolute path> <another absolute path>\n");
		exit(1);
  }
	if (!((argc == 4) || (argc == 5))){
		fprintf(stderr, "Usage: ext2_ln <disk>  -s[optional] <absolute path> <another absolute path>\n");
		exit(1);
	}

  // initialize the disk
  int fd = open(chosen_disk, O_RDWR);
  disk = mmap(NULL, 128 * 1024, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
  if(disk == MAP_FAILED) {
      perror("mmap");
      exit(1);
  }

	// create_hard_link
	if (argc == 4) create_hard_link(argv);

  if (argc == 5) create_soft_link(argv);

}
