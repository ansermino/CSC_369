#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "traffic.h"

extern struct intersection isection;

/**
 * Populate the car lists by parsing a file where each line has
 * the following structure:
 *
 * <id> <in_direction> <out_direction>
 *
 * Each car is added to the list that corresponds with
 * its in_direction
 *
 * Note: this also updates 'inc' on each of the lanes
 */
void parse_schedule(char *file_name) {
    int id;
    struct car *cur_car;
    struct lane *cur_lane;
    enum direction in_dir, out_dir;
    FILE *f = fopen(file_name, "r");

    /* parse file */
    while (fscanf(f, "%d %d %d", &id, (int*)&in_dir, (int*)&out_dir) == 3) {

        /* construct car */
        cur_car = malloc(sizeof(struct car));
        cur_car->id = id;
        cur_car->in_dir = in_dir;
        cur_car->out_dir = out_dir;

        /* append new car to head of corresponding list */
        cur_lane = &isection.lanes[in_dir];
        cur_car->next = cur_lane->in_cars;
        cur_lane->in_cars = cur_car;
        cur_lane->inc++;
    }

    fclose(f);
}

/**
 * TODO: Fill in this function
 *
 * Do all of the work required to prepare the intersection
 * before any cars start coming
 *
 */
void init_intersection() {

	int count;
	while(count < 4){

		isection.lanes[i].in_cars = NULL;
		isection.lanes[i].out_cars = NULL;
		isection.lanes[i].inc = 0;
		isection.lanes[i].passed = 0;
		isection.lanes[i].buffer = (struct car**)malloc(LANE_LENGTH*(sizeof(struct car*)));
		isection.lanes[i].head = 0;
		isection.lanes[i].tail = 0;
		isection.lanes[i].capacity = LANE_LENGTH;
		isection.lanes[i].in_buf = 0;


		pthread_mutex_init(&(isection.lanes[i].lock), NULL);
		pthread_cond_init(&(isection.lanes[i].consumer_cv), NULL);
		pthread_cond_init(&(isection.lanes[i].producer_cv), NULL);

		pthread_mutex_init(&(isection.quad[i]), NULL);

	}

/**
 * TODO: Fill in this function
 *
 * Populates the corresponding lane with cars as room becomes
 * available. Ensure to notify the cross thread as new cars are
 * added to the lane.
 *
 */
void *car_arrive(void *arg) {
	struct lane *l = arg;

	while(1){

		pthread_mutex_lock(&(*l.lock))

		while(*l.in_buf == *l.capacity){

			pthread_mutex_wait(&(*l.producer_cv), &(*l.lock));

		}

		//check again
		if (*l.in_buf < *l.capacity){

			int new_tail;

			if (*l.in_buf == 0){

				//when there is no element in buffer
				//simply use the tail as new tail, and no need to add
				new_tail = *l.tail;

			}else{

				//if tail is already the end of the buffer, change back to 0
				if (*l.tail == *l.capacity){

					*l.tail = 0;

				}
				//otherwise, just add
				else{
					*l.tail ++;
				}

				new_tail = *l.tail;
			}


			*l.buffer[new_tail] = *l.in_cars;

			*l.in_buf ++;

			*l.in_cars = (*l.in_cars).next

			pthread_mutex_signal(&(*l.consumer_cv), &(*l.lock));

		}

	 	pthread_mutex_unlock(&(*l.lock))

	 	if (*l.in_car == NULL){
			return NULL;
	 	}

	 }

    return NULL;

}

/**
 * TODO: Fill in this function
 *
 * Moves cars from a single lane across the intersection. Cars
 * crossing the intersection must abide the rules of the road
 * and cross along the correct path. Ensure to notify the
 * arrival thread as room becomes available in the lane.
 *
 * Note: After crossing the intersection the car should be added
 * to the out_cars list of the lane that corresponds to the car's
 * out_dir. Do not free the cars!
 *
 *
 * Note: For testing purposes, each car which gets to cross the
 * intersection should print the following three numbers on a
 * new line, separated by spaces:
 *  - the car's 'in' direction, 'out' direction, and id.
 *
 * You may add other print statements, but in the end, please
 * make sure to clear any prints other than the one specified above,
 * before submitting your final code.
 */
void *car_cross(void *arg) {
	//use compute path to find the needed quadrant
	//unlock every when you need them
	//if there is no car in buffer, signal arrive to let them have car to come
  struct lane *l = arg;
  while(1){

    pthread_cond_lock(&(*l.lock))

 		while(*l.in_buf == 0){
 			pthread_cond_wait(&(*l.consumer_cv), &(*l.lock));
 		}

    struct *temp_car = (l->buffer)[head];
    if(l->head == l->capacity){
      l->head = 0;
    } else{
      l->head += 1;
    }

    int* temp_path = compute_path(temp_car->in_dir ,temp_car->out_dir);


    for(int i=0;i<=3;i++){
      if(temp_path[i] != -1){
        pthread_mutex_lock(isection->quad[temp_path[i]])
      }
    }

    isection.lane[temp_car->out_cars].out_cars = temp_car;
        // 放在头上



    for(int i=0;i<=3;i++){
      if(temp_path[i] != -1){
        pthread_cond_signal(isection->quad[temp_path[i]]);
        pthread_mutex_unlock(isection->quad[temp_path[i]]);
      }
    }
    free(temp_path)

 }

 return NULL;
}

/**
 * TODO: Fill in this function
 *
 * Given a car's in_dir and out_dir return a sorted
 * list of the quadrants the car will pass through.
 *
 */
int *compute_path(enum direction in_dir, enum direction out_dir) {

  int* path = malloc(sizeof(int)*4);
  path = {-1,-1,-1,-1}

  switch(in_dir) {
    case NORTH:
      switch (out_dir) {
        case SOUTH:
          path = {2,3};
        case EAST:
          path = {2,3,4};
        case WEST:
          path =  {2};
        case NORTH:
          path = {2,3,4,1};
      }

    case WEST:
      switch (out_dir) {
        case EAST:
          path = {3,4};
        case SOUTH:
          path = {3};
        case NORTH:
          path = {3,4,1};
        case WEST:
          path = {3,4,1,2};
      }

    case SOUTH：
      switch (out_dir) {
        case EAST:
          path = {4};
        case WEST:
          path = {4,1,2};
        case NORTH:
          path = {4,1};
        case SOUTH:
          path = {4,1,2,3}
      }

    case EAST：
      switch (out_dir) {
        case SOUTH:
          path = {1,2,3};
        case WEST:
          path = {1,2};
        case NORTH:
          path = {4,3,2};
        case EAST:
          path = {4,3,2,1}
      }
  }
  return path;
}
